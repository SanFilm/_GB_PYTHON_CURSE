#   todo-tree.highlights.customHighlight
        # BUG ---------------
        # HACK ---------------
        # FIXME ---------------
        # XXX ---------------
        # [ ] ---------------
        # [*] ---------------
        # [-] ---------------
        # -T- ---------------
        # -I- ---------------
        # -C- ---------------
        # -F- ---------------
        # -f- ---------------
        # [x] ---------------
        # [--] ---------------
        # |--- ---------------
        # TODO ---------------
#   better-comments.tags
        # ! ---------------
        # ? ---------------
        # // ---------------
        # todo ---------------
        # * ---------------

# -F- ---divider-------------------------------------------
def divider(num):
    r = '- - -'
    print()
    for i in range(5): print(f'{r} {num}. ', end = '')
    print(f'{r}\n')
# -F- ---br------------------------------------------------
def br(ch):
    print(f'{ch} ', end = '')
    for i in range(20): print(f'{ch} ', end = '')
    print(f'{ch}')
# -F- ---br_-----------------------------------------------
def br_(ch):
    print(f'\n{ch} ', end = '')
    for i in range(50): print(f'{ch} ', end = '')
    print(f'{ch}\n')
# -F- -----------------------------------------------------
def bbrr(ch):
    print(f'{ch} ', end = '')
    for i in range(50): print(f'{ch} ', end = '')
    print(f'{ch}')
# -F- -----------------------------------------------------

print('\n')
bbrr('=')
print('=','---  Коллекции данных. ---'.center(99),"=")
bbrr('=')
print('\n')
print('- - - Объявление и вывод. - - - \n'.center(50))
# print('- \'list\' - список. -\n'.center(50))
lst_1 = []
print(f'\'lst_1 = []\'  ->  {lst_1}  ->  {type(lst_1)}   -  Список.\n')
# print('- \'tuple\' - кортеж. -\n'.center(50))
Tpl_1 = ()
print(f'\'Tpl_1 = ()\'  ->  {Tpl_1}  ->  {type(Tpl_1)}  -  Кортеж.\n')
# print('- \'dictionary\' - словарь. -\n'.center(50))
Dct_1 = {}
print('\'Dct_1 = {}\'  -> ', Dct_1, ' ->  ', type(Dct_1), ' -  Словари.\n')
# print('- \'set\' - множество. -\n'.center(50))
bbrr('=')
# [ ] -----------------------------------------------------
print('->->-> Списки ->->->')
# [ ] -----------------------------------------------------
print()
print('--- Список - упорядоченный конечный набор элементов. ---')
print('--- Список <-> Массив. ---')
print()
# -C- -----------------------------------------------------
print('- - - Объявление и вывод Списка. - - - ')
# |--- -----------------------------------------------------
print()
list_1 = []               # Объявление Списка.
print(f'\'list_1 = []\'  ->  {list_1}  ->  {type(list_1)}  -  Список.')
print()
br('-')
list_1 = list()
print(list_1)
br('-')
list_1 = [5, 3, 6, 1, 2, 9]
print(list_1)
br('-')
print(*list_1)
br('-')
# -f- -------------------------------------------------------
print('- - - \'print(..., end = " ")\' - в строку.    Вывод через \'For\' - - - ')
# |--- -----------------------------------------------------
list_1 = [3, 6, 1, 2]
for i in list_1:
  print(i, end = " ")   # 3 6 1 2 
print()
br('-')
# -f- ------------------------------------------------------
print('- - - \'len(name)\'  -  Длина списка - - - ')
# |--- -----------------------------------------------------
print(len(list_1))
br('-')
# -f- ------------------------------------------------------
print('- - - \'list_1[0]\'  -  Обращение к элементу - - - ')
# |--- -----------------------------------------------------
list_1 = [3, 6, 1, 8]
print(f'{list_1} - исходный список\n')
# 1-й элемент с начала
print('{el:2} - [{indx:}] <- list1[{strIndx:2}]  -  1-й элемент с начала.'.format(indx = list_1.index(list_1[0]), el = list_1[0], strIndx = 0))
# 4-й элемент с конца
print('{el:2} - [{indx:}] <- list1[{strIndx:2}]  -  4-й элемент с конца.'.format(indx = list_1.index(list_1[-4]), el = list_1[-4], strIndx = -4))
# 4-й элемент с начала
print('{el:2} - [{indx:}] <- list1[{strIndx:2}]  -  4-й элемент с начала.'.format(indx = list_1.index(list_1[3]), el = list_1[3], strIndx = 3))
# 1-й элемент с конца
print('{el:2} - [{indx:}] <- list1[{strIndx:2}]  -  1-й элемент с конца.'.format(indx = list_1.index(list_1[-1]), el = list_1[-1], strIndx = -1))
# 1-й элемент с конца - альтернативный вывод последней строки.
# print('{0:2} - [{1:}] <- list1[{2:2}]  -  1-й элемент с конца.'.format(list_1[-1], list_1.index(list_1[-1]), -1))
br('-')
br('-')
# |--- -----------------------------------------------------
        # ? ---------------
print('|=>',' !!! Как это работает (доп. см. 01.Console.py) !!! '.center(99, '?'),'=>|')
br('-')
        # Формат записи:
print('{el:2} - [{idx:}] <- list1[{st:2}]'.format(idx = list_1.index(3), el = list_1[0], st = 0))     #  3 - [0] <- list1[ 0]
print('{0:2} - [{1:}] <- list1[{2:2}]'.format(list_1[0], list_1.index(3), 0))                         #  3 - [0] <- list1[ 0]
    #    3   - [  0 ] <- list1[  0  ]     ###        3 ,             [0], 0 
            # list_1 = [3, 6, 1, 8]
    # list_1[0]         - Выведет элемент: 3
    # list_1.index(3)   - Выведет  индекс: 0
br('-')
print('|<=',' !!! Как это работает (доп. см. 01.Console.py) !!! '.center(99, '?'),'<=|')
        # ? ---------------
# |--- -----------------------------------------------------
br('-')
# -f- ------------------------------------------------------
print('- - - \'.append(8)\'  -  Добавление элемента в конец списка - - - ')
# |--- -----------------------------------------------------
list_1 = [1, 2]           # создание списка
print(f'{list_1} - исходный список')
list_1.append(8)          # добавление элемента в конец списка
print(list_1)
list_1.append(85)         # добавление элемента в конец списка
print(list_1)
print('- - - - - - - - - - - - - - - - - - ')
print('- - - Заполнение списка через \'For\' - - - ')
print('- - - 1. Авто заполнение. - - - ')
# |--- -----------------------------------------------------
list_1 = []
print(list_1)
for i in range(5):
  list_1.append(i)
  print(list_1)
print('- - - 2. Заполнение через консоль. - - - ')
# |--- -----------------------------------------------------
print('...')
""" list_1 = list()           # создание пустого списка
for i in range(5):        # цикл выполнится 5 раз
  n = int(input(f'Введите {i+1}-е число: ')) # пользователь вводит целое число
  list_1.append(n)        # сохранение элемента в конец списка
# 1-я итрция: n = 12, list_1 = [12]
# 2-я итрция: n = 7,  list_1 = [12, 7]
# 3-я итрция: n = -1, list_1 = [12, 7, -1]
# 4-я итрция: n = 21, list_1 = [12, 7, -1, 21]
# 5-я итрция: n = 0,  list_1 = [12, 7, -1, 21, 0] 
  print(list_1) """
print('- - - - - - - - - - - - - - - - - - ')
print()
print('- - Основные действия со списками: - - ')
print('- - - - - - - - - - - - - - - - - - ')
# -f- ------------------------------------------------------
print('- - - \'.pop()\'  -  Удаление последнего элемента списка. - - - ')
# |--- -----------------------------------------------------
list_1 = [12, 7, -1, 21, 0]
print(f'{list_1} - исходный список')
print(f'удалит: {list_1.pop()}')    # удаляет 0
print(list_1)                       # [12, 7, -1, 21]
print(f'удалит: {list_1.pop()}')    # удаляет 21
print(list_1)                       # [12, 7, -1]
print('- - - - - - - - - - - - - - - - - - ')
# -f- ------------------------------------------------------
print('- - - \'.pop(0)\'  -  Удаление конкретного элемента, по индексу, из списка. - - - ')
# |--- -----------------------------------------------------
list_1 = [12, 7, -1, 21, 0]
print(f'{list_1} - исходный список')
print(list_1.pop(0))                # 12
print(list_1)                       # [7, -1, 21, 0]
print('- - - - - - - - - - - - - - - - - - ')
# -f- ------------------------------------------------------
print('- - - \'.insert(2, 11)\'  -  Добавление элемента на нужную позицию. - - - ')
# |--- -----------------------------------------------------
list_1 = [12, 7, -1, 21, 0]
print(f'{list_1} - исходный список')
list_1.insert(2, 11)
print(list_1)                        # [12, 7, 11, -1, 21, 0]
print()
print('<-<-<- Списки <-<-<-')
print()
# print('- - - - - - - - - - - - - - - - - - ')
print('= = = = = = = = = = = = = = = = = = ')
# print('- - - - - - - - - - - - - - - - - - ')
print()
# [ ] -----------------------------------------------------
print('->->-> Срез списка (по индексу). ->->-> ')
# [ ] -----------------------------------------------------
print()
print('- - - - - - - - - - - - - - - - - - ')
list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(f'{list_1} - исходный список')
# |--- -----------------------------------------------------
print('- - - - - - - - - - - - - - - - - - ')
print(list_1[0])                # 1
print(list_1[1])                # 2
print(list_1[len(list_1)-1])    # 10
print(list_1[-1])               # 10
print(list_1[-5])               # 6
print(list_1[:])                # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(list_1[:2])               # [1, 2]
print(list_1[len(list_1)-2:])   # [9, 10]
print(list_1[2:9])              # [3, 4, 5, 6, 7, 8, 9]
print(list_1[6:-18])            # []
print(list_1[0:len(list_1):6])  # [1, 7]
print(list_1[::6])              # [1, 7]
print('- - - - - - - - - - - - - - - - - - ')
print('print ( list_1 [ начало : конец : шаг ] )')
# |--- -----------------------------------------------------
print('- - - - - - - - - - - - - - - - - - ')
print()
print('<-<-<- Срез списка (по индексу). <-<-<- ')
print()
print('= = = = = = = = = = = = = = = = = = ')
print()
# [ ] -----------------------------------------------------
print('->->-> Кортеж. ->->-> ')
# [ ] -----------------------------------------------------
print()
print('- - - Кортеж — это неизменяемый список, занимает меньше места в памяти и работают быстрее. - - - ')
# |--- -----------------------------------------------------
print()
print('- - - - - - - - - - - - - - - - - - ')
# -C- -----------------------------------------------------
print('- - - Объявление и вывод Кортежа. - - - ')
# |--- -----------------------------------------------------
print('- - - - - - - - - - - - - - - - - - ')
print()
t = ()                                          # Объявление Кортежа.
print(f'\'t = ()\'             -> {type(t)}  <-    Кортеж.')
print('\'print(t)\'  - ',t)                     # ()
print('\'print(*t)\' - ', *t)                   # ничего не видно

print('- - - - - - - - - - - - - - - - - - ')
print()
t = ('Hi')
print(f'\'t = (\'Hi\')\'         -> {type(t)}    <-    Строка.')
print('\'print(t)\'  - ',t)                     # Hi
print('\'print(*t)\' - ', *t)                   # H i

print('- - - - - - - - - - - - - - - - - - ')
print()
t = ('Hi',)
print(f'\'t = (\'Hi\',)\'        -> {type(t)}  <-    Кортеж.')
print('\'print(t)\'  - ',t)                     # ('Hi',)
print('\'print(*t)\' - ', *t)                   # Hi

print('- - - - - - - - - - - - - - - - - - ')
print()
t = ('Hi', 'Я')
print(f'\'t = (\'Hi\', \'Я\')\'    -> {type(t)}  <-    Кортеж.')
print('\'print(t)\'  - ',t)                     # ('Hi', 'Я')
print('\'print(*t)\' - ', *t)                   # Hi Я

print('- - - - - - - - - - - - - - - - - - ')
print()
t = (1)
print(f'\'t = (1)\'            -> {type(t)}    <-    Число.')
print('\'print(t)\'  - ',t)                     # 1
print('\'print(*t)\' - ', 'TypeError: ...')     # TypeError: print() argument after * must be an iterable, not int

print('- - - - - - - - - - - - - - - - - - ')
print()
t = (1,)
print(f'\'t = (1,)\'           -> {type(t)}  <-    Кортеж.')
print('\'print(t)\'  - ', t)                    # (1,)
print('\'print(*t)\' - ', *t)                   # 1

print('- - - - - - - - - - - - - - - - - - ')
print()
t = (1, 3, 5)
print(f'\'t = (1, 3, 5)\'      -> {type(t)}  <-    Кортеж.')
print('\'print(t)\'  - ', t)                    # (1, 3, 5)
print('\'print(*t)\' - ', *t)                   # 1 3 5
# print('\'print(t)\' -> ', t, '; \'print(*t)\' -> ', *t)                   # 1 3 5
# print('\'print(*t)\' - ', *t, '; \'print(t)\' - ', t)                   # 1 3 5

print('- - - - - - - - - - - - - - - - - - ')
print()
print('- - - Типы данных и их конвертация. - - - ')
# |--- -----------------------------------------------------

print('- - - - - - - - - - - - - - - - - - ')
Lst = ['red', 'green', 'blue']  # ['red', 'green', 'blue']
print('           - Из Списка: -')
print(f'\'Lst = [\'red\', \'green\', \'blue\']\'        ->  {Lst}  ->  {type(Lst)}   -  Список.')
print()
Tpl = tuple(Lst)                  # ('red', 'green', 'blue')
print('           - Конвертируем в Кортеж: -')
print(f'\'Tpl = tuple(Lst)\'                      ->  {Tpl}  ->  {type(Tpl)}  -  Кортеж.')
print()
Tpl = tuple(['red', 'green', 'blue'])
print('           - Или так: -')
print(f'\'Tpl = tuple([\'red\', \'green\', \'blue\'])\' ->  {Tpl}  ->  {type(Tpl)}  -  Кортеж.')
print('- - - - - - - - - - - - - - - - - - ')

print('- - - - - - - - - - - - - - - - - - ')
print(f'{Tpl[0]}       # \'Tpl[0]\'')                    # red
print(f'{Tpl[2]}      # \'Tpl[2]\'')                     # blue
print('- - - Заполнение кортежа через \'For\' - - - ')
for e in Tpl:
  print(e, end =' | ')          # red | green | blue
print()
print('- - - - - - - - - - - - - - - - - - ')
print()
t = ['red', 'green', 'blue']
t[0] = 'black'
print(t)
print(t[0])
t = ('red', 'green', 'blue')
# t[0] = 'black'                  # TypeError: 'tuple' object does not support(нельзя изменять кортеж)
print(t)
print(t[0])
print('- - - - - - - - - - - - - - - - - - ')
print()
t = tuple(['red', 'green', 'blue'])
t = ('red', 'green', 'blue')
print(t)
r, g, b = t
print(r, g, b)
red, green, blue = t
print('r:{} g:{} b:{}'.format(red, green, blue))    # r:red g:green b:blue

print('- - - - - - - - - - - - - - - - - - ')

print()
print('<-<-<- Кортеж. <-<-<- ')
print()
print('= = = = = = = = = = = = = = = = = = ')
print()
# [ ] -----------------------------------------------------
print('->->-> Словари. ->->-> ')
# [ ] -----------------------------------------------------
print()
print('- - - Словари — неупорядоченные коллекции произвольных объектов с доступом по ключу. - - - ')
# |--- -----------------------------------------------------
print()
print('- - - - - - - - - - - - - - - - - - ')
# -C- -----------------------------------------------------
print('- - - Объявление и вывод Словаря. - - - ')
# |--- -----------------------------------------------------
print('- - - - - - - - - - - - - - - - - - ')
print()
d = {}
print(d)
d = dict()
print(d)
d['q'] = 'qwerty'
print(d)
d['w'] = 'werty'
print(d)
print(d['w'])
print('- - - - - - - - - - - - - - - - - - ')
print()
dictionary = {}
print(dictionary)               # {}
dictionary[895] = 97895
print(dictionary)               # {895: 97895}   - Добавление элемента.
dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}
dictionary['895'] = '97895'     # Добавление элемента строчного типа.
# ? -----------------------------------------------------
# ! -----------------------------------------------------
# dictionary[895] = 97895
# ? -----------------------------------------------------
print(dictionary)               # {'up':'↑', 'left':'←', 'down':'↓', 'right':'→', '895':'97895'}
dictionary['left'] = '⇐ L'      # Изменение элемента '←' на '⇐ L'
# типы ключей могут отличаться
print(dictionary['left'])       # ⇐ L
print(dictionary)               # {'up':'↑', 'left':'⇐ L', 'down':'↓', 'right':'→', '895':'97895'}
# типы ключей могут отличаться
print(dictionary['up'])         # ↑
# print(dictionary['type'])     # KeyError: 'type'
del dictionary['left']          # удаление элемента по ключу 'left'
print(dictionary)               # {'up':'↑', 'down':'↓', 'right':'→', '895':'97895'}
del dictionary['895']           # удаление элемента по ключу '895'
print(dictionary)               # {'up':'↑', 'down':'↓', 'right':'→'}
print('- - - - - - - - - - - - - - - - - - ')
print()
print('- - - Вывод ключей - \'For\'. - - - ')
for item in dictionary:
  print(item, end = ' ')                              # up down right
print('- - - - - - - - - - - - - - - - - - ')
print()
print('- - - Вывод ключа и значения - \'For\'. - - - ')
for item in dictionary:         # for (k,v) in dictionary.items():
  # print('{}: {}'.format(item, dictionary[item]))
  # up: ↑
  # down: ↓
  # right: →

  # print(item,':', dictionary[item], end = '  ')       # up : ↑  down : ↓  right : → 

  print(f'{item}: {dictionary[item]}', end = ';  ')     # up: ↑;  down: ↓;  right: →;
print()
print('- - - - - - - - - - - - - - - - - - ')
print()
print()
print('<-<-<- Словари. <-<-<- ')
print()
print('= = = = = = = = = = = = = = = = = = ')
print()
# print('- - - - - - - - - - - - - - - - - - ')
print()
# print()

list_1 = [3, 6, 1, 8]
print(f'{list_1} - исходный список\n')
print('{el:2} - [{indx:}] <- list1[{strIndx:2}]  -  1-й элемент с конца.'.format(indx = list_1.index(list_1[-1]), el = list_1[-1], strIndx = -1))         # 1-й элемент с конца
print('{0:2} - [{1:}] <- list1[{2:2}]  -  1-й элемент с конца.'.format(list_1[-1], list_1.index(list_1[-1]), -1))         # 1-й элемент с конца
