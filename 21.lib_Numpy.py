
# ? -----------------------------------------------------
# Дополнительная информация:
# https://mipt-stats.gitlab.io/courses/python/05_numpy.html
# ? -----------------------------------------------------
def HELP():
    print("Разметка")
    #   todo-tree.highlights.customHighlight
            # BUG ---------------
            # HACK ---------------
            # FIXME ---------------
            # TODO ---------------
            # XXX ---------------
            # -T- ---------------
            # -I- ---------------
            # -C- ---------------
            # -F- ---------------
            # -f- ---------------
            # [ ] ---------------
            # [*] ---------------
            # [x] ---------------
            # [--] ---------------
            # [-] ---------------
    #   better-comments.tags
            # ! ---------------
            # ? ---------------
            # // ---------------
            # todo ---------------
            # * ---------------
# ? -----------------------------------------------------

        # -I- ---------------
import numpy as np          # Подключение библиотеки.
# Если ошибка не пропадает.
# Установка 'NumPy'. В терминале ввести (Mac High Sierra):
#    pip3 install numpy
# Удаление:
#    pip uninstall numpy
# Проверка версии:
#    pip list
        # -I- ---------------

# -F- ---divider--------------------------------------------
def divider(num):
    r = '- - -'
    print()
    for i in range(5): print(f'{r} {num}. ', end = '')
    print(f'{r}\n')
# -F- ---br-------------------------------------------------
def br(ch):
    print(f'{ch} ', end = '')
    for i in range(20): print(f'{ch} ', end = '')
    print(f'{ch}')
# -F- ---br_------------------------------------------------
def br_(ch):
    print(f'\n{ch} ', end = '')
    for i in range(50): print(f'{ch} ', end = '')
    print(f'{ch}\n')
# -F- ------------------------------------------------------

# -F- ------------------------------------------------------

# [ ] -------------------------------------------------->->->
com, t = 60, 70

br_('=')
# -C- ---------------
print('--- _AI-02.00...Библиотеки Numpy. ---'.center(com, '-'))
br('-')
# |--- ------------------------------------------------------
# -C- ---------------
print('\n', "---  np.array() - превращает список в массив.  ".ljust(t, '-'), '\n')
my_list = [1, 2, 3, 4, 5]                 # Задание списка чисел с названием my_list
print('my_list   = ', my_list, ' - список - ', type(my_list))
numpy_arr = np.array(my_list)             # Вызов np.array() превращает список в массив чисел
print('numpy_arr =   ', numpy_arr, '   - массив - ', type(numpy_arr))   # Проверка результата
br('-')
# |--- ------------------------------------------------------
# -C- ---------------
print('\n', "---  np.arange(1, 6) - задает массив значений от 1 до (не включая) 6.  ".ljust(t, '-'), '\n')
new_arr = np.arange(1, 6)                 # Вызов arange(1, 6) задает массив значений от 1 до (не включая) 6
print(new_arr)                            # Проверка результата
print(f'new_arr - {type(new_arr)}')
br('-')
# |--- ------------------------------------------------------
# -C- ---------------
print('\n', "---  np.random.randint(1, 21, 5) - массив [1, 21), элем. - 5.  ".ljust(t, '-'), '\n')
# random        - метод для работы с случайными числами.
# randint()     - случайные числа в интервале.
arr = np.random.randint(1, 21, 5)         # От 1 до (не включая) 11 - границы массива, а число 5 - общее кол-во чисел
print(arr)                                # Проверка результата
print(f'arr - {type(arr)}')
br('-')
# |--- ------------------------------------------------------
# -C- ---------------
print('\n', "---  Типы данных в массивах Numpy.  ".ljust(t, '-'), '\n')
# int64, float32. Цифра означают объем памяти.
arr = np.array([1, 2, 3, 45, 7])                    # Массив из целых чисел.
print('{}   - {}'.format(arr.dtype, arr))           # Тип данных: int64.
arr = np.array([1, 2, 3, 45, 7], dtype = float)     # 'float'
print('{} - {}'.format(arr.dtype, arr))             # Тип данных: float64.
arr = np.array([1.23, 7.1, 3.14])                   # Массив из дробных чисел.
print('{} - {}'.format(arr.dtype, arr))             # Тип данных: float64.
arr = np.array([1.23, 7.1, 3.14], dtype = int)      # 'int'
print('{}   - {}'.format(arr.dtype, arr))           # Тип данных: int64.
arr = np.array(["First", "Second", "blabla", "12345678"])       # Текстовые данные.
print('{}     - {}'.format(arr.dtype, arr))                     # Тип данных: <U6, где строки длиной не более 8 символов.
br('-')
# |--- ------------------------------------------------------
# -C- ---------------
print('\n', "---  Размерности и форма массивов Numpy.  ".ljust(t, '-'), '\n')
br('-')
# |--- ------------------------------------------------------
# 0-d array
x = np.array(4)       # x = np.array([4])
print(f' {x.ndim}D массив - СКАЛЯР. '.rjust(t//2, '-'))
print('     \'np.array(4)\'   или   \'np.array([4])\'')
print(x, '\n')
print(' - ', 'Количество осей: ', x.ndim, ' - ')
print(' - ', 'Форма массива: ', x.shape, ' - ')
print(' - ', 'Количество значений: ', x.size, ' - ')
br('-')
# |--- ------------------------------------------------------
# 1-d array
y = np.array([1, 2, 3])
print(f' {y.ndim}D массив - ВЕКТОР. '.rjust(t//2, '-'))
print('     \'np.array([1, 2, 3])\'')
print(y, '\n')
print(' - ', 'Количество осей: ', y.ndim, ' - ')
print(' - ', 'Форма массива: ', y.shape, ' - ')
print(' - ', 'Количество значений: ', y.size, ' - ')
br('-')
array_1D = np.random.randint(-5, 5, 4)                        # Задается одномерный массив
print('     \'np.random.randint(-5, 5, 4)\'')
print(array_1D, '\n')
print(' - ', 'Количество осей: ', array_1D.ndim, ' - ')
print(' - ', 'Форма массива: ', array_1D.shape, ' - ')
print(' - ', 'Количество значений: ', array_1D.size, ' - ')
br('-')
# |--- ------------------------------------------------------
# 2-d array
z = np.array([[11, 62, 3], [46,95,96]])
print(f' {z.ndim}D массив - МАТРИЦА. '.rjust(t//2+1, '-'))
print('     \'np.array([[11, 62, 3], [46,95,96]])\'')
print(z, '\n')
print(' - ', 'Количество осей: ', z.ndim, ' - ')
print(' - ', 'Форма массива: ', z.shape, ' - ')
print(' - ', 'Количество значений: ', z.size, ' - ')
br('-')
array_2D = random_matrix = np.random.randint(0, 10, (3, 5))   # Задается двумерный массив
print('     \'random_matrix = np.random.randint(0, 10, (3, 5))\'')
print(array_2D)
print(' - ', 'Количество осей: ', array_2D.ndim, ' - ')
print(' - ', 'Форма массива: ', array_2D.shape, ' - ')
print(' - ', 'Количество значений: ', array_2D.size, ' - ')
br('-')
# |--- ------------------------------------------------------
# 3-d array
c = np.array([[[11, 2, 3], [48,85, 6]], [[17,78,78], [44,95, 6]]])
print(f' {c.ndim}D массив - ТЕНЗОР. '.rjust(t//2, '-'))
print('     \'np.array([[[11, 2, 3], [48,85, 6]], [[17,78,78], [44,95, 6]]])\'')
print(c,'\n')
print(' - ', 'Количество осей: ', c.ndim, ' - ')
print(' - ', 'Форма массива: ', c.shape, ' - ')
print(' - ', 'Количество значений: ', c.size, ' - ')
br('-')
tensor = np.random.randint(-5, 5, (3, 2, 2))                # Во вторых скобках заданы размеры тензора в высоту, ширину, глубину (оси X,Y,Z)
print('     \'np.random.randint(-5, 5, (3, 2, 2))\'')
print(tensor, '\n')                                         # Вывод трехмерного тензора
print(' - ', 'Количество осей: ', tensor.ndim, ' - ')
print(' - ', 'Форма массива: ', tensor.shape, ' - ')
print(' - ', 'Количество значений: ', tensor.size, ' - ')
br('-')
# |--- ------------------------------------------------------
# 5-d array
array_5D = np.random.randint(0, 10, (2, 2, 2, 4, 8))        # Задается пятимерный массив
print(f' {array_5D.ndim}D массив - ТЕНЗОР. '.rjust(t//2, '-'))
print('     \'np.random.randint(0, 10, (2, 2, 2, 4, 8))\'')
print(array_5D, '\n')                                       # Вывод пятимерного тензора
print(' - ', 'Количество осей: ', array_5D.ndim, ' - ')
print(' - ', 'Форма массива: ', array_5D.shape, ' - ')
print(' - ', 'Количество значений: ', array_5D.size, ' - ')
br('-')
# |--- -----------------------------------------------------
# -C- ---------------
print('\n', "---  Индексация в массивах.  ".ljust(t, '-'), '\n')
tensor = np.random.randint(0, 10, (3, 2, 5))              # Создание трехмерного тензора
print(f' {tensor.ndim}D массив - ТЕНЗОР. '.rjust(t//2, '-'))
print('     \'np.random.randint(0, 10, (3, 2, 5))\'')
print(tensor)
print('-'.center(com//2, '-'))
print('     \'tensor[2]\'')
print(tensor[2])                                # Выделение одного из его слоев (слой №2 - отдельная матрица)
                                                # На место в тензоре также укажет количество квадратных скобок
print('-'.center(com//2, '-'))
print('     \'tensor[2, 1]\'')
print(tensor[2, 1])                             # Выделение вектора под индексом места 1
                                                # Этот вектор берется из матрицы с индексом 2
                                                # Это видно, если сравнить результаты кода этой и предыдущей ячеек
print('-'.center(com//2, '-'))
print('     \'tensor[2, 1]\'')
print(tensor[2, 1, 0])                          # Здесь способ найти отдельное число под индексом 0
                                                # Число взято из слоя 2, строки 1 и столбца 0 тензора
br('-')
# |--- -----------------------------------------------------
# -C- ---------------
print('\n', "---  Срезы.  ".ljust(t, '-'), '\n')
matrix = np.random.randint(-10, 10, (5, 5))     # Значения матрицы случайны в пределах (-10, 10), 5 строк и 5 столбцов
print(f' {matrix.ndim}D массив - МАТРИЦА. '.rjust(t//2, '-'))
print('     \'np.random.randint(-10, 10, (5, 5)\'')
print(matrix)
print('-'.center(com//2, '-'))
print('     \'matrix[:3]\'')
print(matrix[:3])                               # Выведет все значения первых трёх строк.
print('-'.center(com//2, '-'))
print('     \'matrix[0]\'')
print(matrix[0])                                # Выведет 1-ю строку.
print('-'.center(com//2, '-'))
print('     \'matrix[:, 0]\'')
print(matrix[:, 0])                             # Выведет 1-й столбец матрицы.
print('-'.center(com//2, '-'))
print('     \'matrix[:, 1]\'')
print(matrix[:, 1])                             # Выведет 2-й столбец матрицы.
print('-'.center(com//2, '-'))
print('     \'matrix[1, 2]\'')
print(matrix[1, 2])                             # Выведет элемент 2-й строки 3-го столбца.
br('-')
# |--- -----------------------------------------------------
# -C- ---------------
print('\n', "---  Операции с тензорами.  ".ljust(t, '-'), '\n')
arr_1 = np.random.randint(-9, 10, 5)
arr_2 = np.random.randint(-9, 10, 5)
print(f'Исх.:   {arr_1}')
print(f'Исх.:   {arr_2}')
print('-'.center(com//2, '-'))
print(' \'Поэлмнтные матмтчске действия.\''.rjust(t//2, '-'))
print('-'.center(com//2, '-'))
print('     \'arr_1 + arr_2\'')
print(arr_1 + arr_2)                     # Поэлементное сложение двух массивов
print('-'.center(com//2, '-'))
print('     \'arr_1 * arr_2\'')
print(arr_1 * arr_2)                     # Поэлементное умножение двух массивов
print('-'.center(com//2, '-'))
print('     \'arr_1 / arr_2\'')
print(arr_1 / arr_2)                     # Поэлементное деление первого массива на второй
print('-'.center(com//2, '-'))
print('     \'arr_1 * 5\'')
print(arr_1 * 5)                         # Умножение каждого элемента массива "arr_1" на число 5
print('-'.center(com//2, '-'))
print('     \'arr_1 / 7\'')
print(arr_1 / 7)                         # Деление каждого элемента массива "arr_1" на число 7
print('-'.center(com//2, '-'))
print('     \'arr_1 ** 3\'')
print(arr_1 ** 3)                        # Возведение каждого элемента массива "arr_1" в степень 3
br('-')
# |--- -----------------------------------------------------
# -C- ---------------
print('\n', "---  Полезные методы.  ".ljust(t, '-'), '\n')
my_array = np.random.randint(0, 10, (5, 5))   # Создание массива
print(f' Исх. массив: '.center(com//2, '-'))
print(my_array)                                 # И вывод его на экран
print('-'.center(com//2, '-'))
print('     \'my_array.sum()\', \'...\', \'my_array.min()\'', '\n')
print("Сумма всех элементов:          {:6} |   # {}".format(my_array.sum(), '\'... .sum()\''))
print("Среднее арифм. всех элементов: {:6} |   # {}".format(my_array.mean(), '\'... .mean()\''))
print("Максимум всех элементов:       {:6} |   # {}".format(my_array.max(), '\'... .max()\''))
print("Минимум всех элементов:        {:6} |   # {}".format(my_array.min(), '\'... .min()\''), '\n')
# br('-')
print('-'.center(com//2, '-'))
print(f' axis=0 применяется ко всем числам каждого столбца. '.rjust(com, '-'))
print('   \'...(axis=0)\' - это СТОЛБЦЫ. '.center(com,   '-'), '\n')
print(f' Исх. массив: '.center(com//2, '-'))
print(my_array)
print('-'.center(com//2, '-'))
print('     \'my_array.sum(axis=0)\', \'...\', \'my_array.min(axis=0)\'', '\n')
print("Сумма всех элементов по столбцам:          ", my_array.sum(axis=0))
print("Среднее арифм. всех элементов по столбцам: ", my_array.mean(axis=0))
print("Максимум среди элементов по столбцам:      ", my_array.max(axis=0))
print("Минимум среди элементов по столбцам:       ", my_array.min(axis=0), '\n')
print('-'.center(com//2, '-'))
print(f' axis=1 применяется ко всем числам каждой строки. '.rjust(com, '-'))
# br('-')
print('   \'...(axis=1)\' - это СТРОКИ. '.center(com,   '-'), '\n')
print(f' Исх. массив: '.center(com//2, '-'))
print(my_array)
print('-'.center(com//2, '-'))
print('     \'my_array.sum(axis=1)\', \'...\', \'my_array.min(axis=1)\'', '\n')
print("Сумма всех элементов по строкам:          ", my_array.sum(axis=1))
print("Среднее арифм. всех элементов по строкам: ", my_array.mean(axis=1))
print("Максимум среди элементов по строкам:      ", my_array.max(axis=1))
print("Минимум среди элементов по строкам:       ", my_array.min(axis=1), '\n')
print('-'.center(com//2, '-'))

br('-')
print()
# [ ] -------------------------------------------------<-<-<-